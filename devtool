#!bash
#
# BASH completion support for OpenEmbedded's Yocto tool: devtool
#
# Most of the functions and ideas, and code snippets taken from the docker's
# bash_completion and tailored for reuse with devtool
# https://raw.githubusercontent.com/docker/docker/master/contrib/completion/bash/docker
#
# Depends upon bash_completion scripting support:
# http://bash-completion.alioth.debian.org/
#
# Distributed under the MIT License (MIT)
__devtool_previous_extglob_setting=$(shopt -p extglob)
shopt -s extglob

# __devtool_to_alternatives transforms a multiline list of strings into a single line
# string with the words separated by `|`.
# This is used to prepare arguments to __devtool_pos_first_nonflag().
__devtool_to_alternatives() {
	local parts=( $1 )
	local IFS='|'
	echo "${parts[*]}"
}

# __devtool_to_extglob transforms a multiline list of options into an extglob pattern
# suitable for use in case statements.
__devtool_to_extglob() {
	local extglob=$( __devtool_to_alternatives "$1" )
	echo "@($extglob)"
}

# __devtool_pos_first_nonflag finds the position of the first word that is neither
# option nor an option's argument. If there are options that require arguments,
# you should pass a glob describing those options, e.g. "--option1|-o|--option2"
# Use this function to restrict completions to exact positions after the argument list.
__devtool_pos_first_nonflag() {
	local argument_flags=$1

	local counter=$((${subcommand_pos:-${command_pos}} + 1))
	while [ $counter -le $cword ]; do
		if [ -n "$argument_flags" ] && eval "case '${words[$counter]}' in $argument_flags) true ;; *) false ;; esac"; then
			(( counter++ ))
			# eat "=" in case of --option=arg syntax
			[ "${words[$counter]}" = "=" ] && (( counter++ ))
		else
			case "${words[$counter]}" in
				-*)
					;;
				*)
					break
					;;
			esac
		fi

		# Bash splits words at "=", retaining "=" as a word, examples:
		# "--debug=false" => 3 words, "--log-opt syslog-facility=daemon" => 4 words
		while [ "${words[$counter + 1]}" = "=" ] ; do
			counter=$(( counter + 2))
		done

		(( counter++ ))
	done

	echo $counter
}


__devtool_complete_color_option() {
    COMPREPLY=( $( compgen -W "auto always never" -- "$cur" ) )
}

_devtool_devtool() {

    echo "prev=${prev}" >>completion.out
    # Look for previous word for context of what needs completion
    case "$prev" in
        --color)
            __devtool_complete_color_option
            return
            ;;
        # Coincidentally, all other options with arguments want a directory
        $(__devtool_to_extglob "$global_options_with_args") )
            _filedir -d
            return
            ;;
    esac

    echo "cur=${cur}" >>completion.out
    # If we got this far, then look at current word for context
    case "$cur" in
        # Flags?
        -*)
            COMPREPLY=( $( compgen -W "$global_boolean_options $global_options_with_args" -- "$cur" ) )
            ;;
        # Must be a subcommand
        *)
			local counter=$( __devtool_pos_first_nonflag "$(__devtool_to_extglob "$global_options_with_args")" )
			if [ $cword -eq $counter ]; then
				COMPREPLY=( $( compgen -W "${commands[*]}" -- "$cur" ) )
			fi
			;;

    esac
}

_devtool_create_workspace() {

    local boolean_flags="
        --help -h
        --create-only
    "

    echo "cur=${cur}" >>completion.out
    case "$cur" in
        -*)
            COMPREPLY=( $( compgen -W "$boolean_flags" -- "$cur" ) )
            return
            ;;
    esac

    # Only complete a single directory parameter
    if [ ${prev//-/_} == $command ] || [[ $prev == -* ]]; then
        _filedir -d
    fi
}

_devtool()
{
    local previous_extglob_setting=$(shopt -p extglob)
    shopt -s extglob

    local global_boolean_options="
        --debug -d
        --quiet -q
        --help -h
    "

    local global_options_with_args="
        --color
        --basepath
        --bbpath
    "

    local commands=(
        create-workspace
        search
        build-image
        build
        deploy-target
        undeploy-target
        upgrade
        add
        modify
        extract
        update-recipe
        status
        reset
    )

    local color

    COMPREPLY=()
    local cur prev words cword
    _get_comp_words_by_ref -n : cur prev words cword

    local command='devtool' command_pos=0 subcommand_pos
    local counter=1
    while [ $counter -lt $cword ]; do
        case "${words[$counter]}" in
            # save color for custom completion types
            --color)
                (( counter++ ))
                color="${words[$counter]}"
                ;;
            $(__devtool_to_extglob "$global_options_with_args") )
                (( counter++ ))
                ;;
            -*)
                ;;
            =)
                (( counter++ ))
                ;;
            # Must be a subcommand encountered
            *)
                command="${words[$counter]}"
                command=${command//-/_}
                command_pos=$counter
                break
                ;;
        esac
        (( counter++ ))
    done

	local completions_func=_devtool_${command}
	declare -F $completions_func >/dev/null && $completions_func

    echo "COMP_CWORD=${COMP_CWORD}" >>completion.out
    echo "COMP_WORDS=${COMP_WORDS[@]}" >>completion.out
    echo "COMPREPLY=${COMPREPLY[@]}" >>completion.out

    eval "$previous_extglob_setting"
    return 0
}

eval "$__devtool_previous_extglob_setting"
unset __devtool_previous_extglob_setting

complete -F _devtool devtool
